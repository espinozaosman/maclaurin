{"version":3,"sources":["macLaurin.js","Components/NumBar/NumBar.js","Line.js","App.js","reportWebVitals.js","index.js"],"names":["factorial","n","serie","x","inicio","multiplicador","i","datos","push","cos","NumBar","props","state","value","handleChange","bind","handleSubmit","event","this","setState","target","preventDefault","className","onSubmit","type","onChange","onClick","React","Component","Grafica","changeState","labels","map","String","datasets","label","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","data","App","Line","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.07ebee1b.chunk.js","sourcesContent":["// Funcion para calcular el factorial de un numero\nlet factorial = n => {\n    return n ? n*factorial(n-1) : 1;\n};\n\n\n/*funcion para hallar el valor de la serie de maclaurin de cos x en radianes\nn es el valor inicial, e inicio es el exponente y base factorial en el primer elemento*/\n\nexport const serie = (x, n, inicio) => {\n\tconst iteraciones = 20; \n\tlet multiplicador = 1;\n\tlet i = inicio;\n    let datos = [];\n\twhile(i < inicio + iteraciones) {\n\t\tmultiplicador *= -1; // alterna entre suma y resta segun explica la serie\n\t\tconst sigElem = (x**i) / factorial(i); // cada elemenento es (x^i) / i!\n\t\tn += multiplicador * sigElem // suma o resta del resultado final\n\t\ti += 2 // incrementa a i en 2 unidades\n        datos.push(n); //creamos el array de datos para poder formar la grafica\n\t}\n\treturn datos;\n}\n\n\n// coseno de x en radianes\nexport const cos = (x) => {\n\treturn serie(x, 1, 2);\n}\n\n\n\n","import React from 'react';\nimport './NumBar.css';\n\n\nclass NumBar extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {value: 'Introduce el valor de X'};\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleChange(event) {\n        this.setState({value: event.target.value}); //maneja el valor que va a ser pasado a la funcion\n    }\n\n\n    handleSubmit(event) {\n        event.preventDefault();\n\n    }\n\n    render() {\n        return (\n            <form className='formulario' onSubmit={this.handleSubmit}>\n                <label className='form-container'> \n                    <input type='text' value={this.state.value} onChange={this.handleChange} />\n                    <input type='submit' value='Calcular' onClick={() => this.props.onClick(this.state.value)}/>\n                </label>\n            </form>\n           \n        )\n    }\n}\n\nexport default NumBar;","import React from 'react';\nimport {Line} from 'react-chartjs-2';\nimport {cos} from './macLaurin';\nimport {serie} from './macLaurin';\nimport NumBar from './Components/NumBar/NumBar';\n\n\nclass Grafica extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.changeState = this.changeState.bind(this);\n\n    //Objeto necesario para el funcionamiento de charts.js, el mismo es modificado en dos valores para obtener la grafica\n    this.state = {\n      labels: serie(0, 1, 2).map(String),\n      datasets: [\n        {\n          label: \"Grafica de serie de MacLaurin para Cos(x)\",\n          fill: false,\n          lineTension: 0.1,\n          backgroundColor: \"rgba(75,192,192,0.4)\",\n          borderColor: \"rgba(75,192,192,1)\",\n          borderCapStyle: \"butt\",\n          borderDash: [],\n          borderDashOffset: 0.0,\n          borderJoinStyle: \"miter\",\n          pointBorderColor: \"rgba(75,192,192,1)\",\n          pointBackgroundColor: \"#fff\",\n          pointBorderWidth: 1,\n          pointHoverRadius: 5,\n          pointHoverBackgroundColor: \"rgba(75,192,192,1)\",\n          pointHoverBorderColor: \"rgba(220,220,220,1)\",\n          pointHoverBorderWidth: 2,\n          pointRadius: 1,\n          pointHitRadius: 10,\n          data: cos(0),\n        },\n      ],\n    };\n  }\n\n  //Metodo para actualizacion del valor y cambio en la grafica\n  changeState(value) {\n    this.setState({\n      labels: serie(value, 1, 2).map(String),\n      datasets: [\n        {\n            label: \"Grafica de serie de MacLaurin para Cos(x)\",\n            fill: false,\n            lineTension: 0.1,\n            backgroundColor: \"rgba(75,192,192,0.4)\",\n            borderColor: \"rgba(75,192,192,1)\",\n            borderCapStyle: \"butt\",\n            borderDash: [],\n            borderDashOffset: 0.0,\n            borderJoinStyle: \"miter\",\n            pointBorderColor: \"rgba(75,192,192,1)\",\n            pointBackgroundColor: \"#fff\",\n            pointBorderWidth: 1,\n            pointHoverRadius: 5,\n            pointHoverBackgroundColor: \"rgba(75,192,192,1)\",\n            pointHoverBorderColor: \"rgba(220,220,220,1)\",\n            pointHoverBorderWidth: 2,\n            pointRadius: 1,\n            pointHitRadius: 10,\n            data: cos(value)\n        },\n      ],\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <h2>Grafica para serie de MacLaurin</h2>\n        <NumBar onClick={this.changeState} />\n        <Line data={this.state} />\n      </div>\n    );\n  }\n}\nexport default Grafica;\n\n\n","import React from 'react';\nimport './App.css';\nimport Line from './Line';\nimport NumBar from './Components/NumBar/NumBar';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Line />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}